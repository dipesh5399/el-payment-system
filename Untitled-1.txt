React
Using capital functional component names
Using *.module.css as css filenames
Styling:
Radium:
For using pseudo selectors and media-query using css in functional and class based component.
Wrap your component before exporting with Radium to use Radium features in class based or functional components. eg,. export default Radium(App)
npm install --save radium
For eg,.
const style = { 
backgroundColor: 'greeen',
color: 'white',
':hover': {
backgroundColor: 'lightgreen',
color: 'black'
},
'@media (min-width: 500px)': {
width: '450px';
}
}
Note:  
You can directly use pseudo selectors using Radium by wrapping your component with Radium before exporting.
But for using media queries you must wrap your entire application (main component render code) with StyleRoot element.
eg,. 
<StyleRoot>
...
</StyleRoot>
AuthContext
For passing data between components without using props.
Creating context component using React.createContext(initialValue);
Wrap JSX code with Context "component.Provider" where you want to access your context. 
You can access value of context component using "value" parameter. eg,. <AuthContext.Provider value={{ authenticated : this.state.authenticated}}>
Wrap JSX code as a function with Context "component.Consumer" where you want to consume your context. Function will accept context as argument and it will return JSX code.
For eg,. <AuthContext.Consumer> {(context) => context.authenticated ? <p>Authenticated!</p> : <p>Please Login</p>

PropTypes from prop-types:
To be more clear about which props your component uses and to also throw an error or a warning if you try to pass in incorrect props.
For using prop types you can install third-party package called 'prop-types' using 'npm install --save prop-types'.
If functional or class based componet you can add extra property, 
 For eg,.
  import PropTypes from 'prop-types;
  ComponentName.propTypes = {
   click: PropTypes.func,
   name: PropTypes.string,
   age: PropTypes.number
  }
  
Using refs
Functional component: Using useRef hook and useEffect
Class based component: Using React.createRef and componentDidMount

Optimizing rendering:
Chrome => Developer console => More tools => Rendering => Paint flashing
Don't use it everywhere. Use only where child component is being updated sometimes only on parent component rendering.
Class based component:
 PureComponent:
  If you want to render child component on update of all props (including functions), then do not use shouldComponentUpdate. Use PureComponent instead of Component.
 Else use shouldComponentUpdate.
 For eg,. 
  shouldComponentUpdate(nextProps, nextState) {
   return (nextProps.persons !== this.props.persons);
  }
Functional component:
 React.memo
  Wrap your functional component with React.Memo before exporting.

Virtual DOM:
React compares Old virtual DOM and Updated virtual DOM and update only updated elements.

Higher order components
 A higher-order component (HOC) is an advanced technique in React for reusing component logic. 
HOCs are not part of the React API, per se. They are a pattern that emerges from React's compositional nature. 
Concretely, a higher-order component is a function that takes a component and returns a new component
For eg,.
 Aux (Alternative React.Fragment)
 withClass

React Fragment:
Since React 16.2, there is build-in Aux component, 
which can be used as a wrapper in cases where we want to have adjacent elements without an extra DOM element being rendered to the real DO.
So without an extra HTML element like a div being rendered.
<React.Fragment>


componentWillReceiveProps
getDerivedStateFromProps
getSnapshotBeforeUpdate
shouldComponentUpdate
componentWillUnmount
componentDidUpdate
componentWillMount
componentDidMount

